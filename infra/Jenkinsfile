import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException
import hudson.model.Result

pipeline {
    agent any

    environment {
        APP_NAME = 'toy'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Extract Branch Name') {
            steps {
                script {
                    env.BRANCH_NAME = env.GIT_BRANCH?.split('/')[-1]
                    echo "Current Branch: ${env.BRANCH_NAME}"
                }
            }
        }

        stage('Build JAR') {
            steps {
                sh 'chmod +x gradlew'
                sh './gradlew clean build -x test'
            }
        }

        stage('Docker Login & Build') {
            steps {
                withCredentials([
                        string(credentialsId: 'docker-hub-username', variable: 'DOCKER_USERNAME'),
                        string(credentialsId: 'docker-hub-password', variable: 'DOCKER_PASSWORD')
                ]) {
                    script {
                        def imageTag = "${DOCKER_USERNAME}/${APP_NAME}:latest"
                        sh """
                            echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin
                            docker build -t ${imageTag} -f infra/Dockerfile .
                        """
                    }
                }
            }
        }

        stage('Docker Push') {
            when {
                expression {
                    return env.BRANCH_NAME == 'main'
                }
            }
            steps {
                withCredentials([
                        string(credentialsId: 'docker-hub-username', variable: 'DOCKER_USERNAME')
                ]) {
                    script {
                        def imageTag = "${DOCKER_USERNAME}/${APP_NAME}:latest"
                        sh "docker push ${imageTag}"
                    }
                }
            }
        }

        stage('Deploy on Local Jenkins Server') {
            when {
                expression {
                    return env.BRANCH_NAME == 'main'
                }
            }
            steps {
                withCredentials([
                        string(credentialsId: 'docker-hub-username', variable: 'DOCKER_USERNAME')
                ]) {
                    script {
                        def imageTag = "${DOCKER_USERNAME}/${APP_NAME}:latest"
                        sh """
                            echo "[1] Pulling latest image"
                            docker pull ${imageTag}

                            echo "[2] Stopping old container"
                            docker stop toy-app 2>/dev/null || true
                            docker rm toy-app 2>/dev/null || true

                            echo "[3] Running new container"
                            docker run -d --name toy-app \\
                              --network=toy-infra_toy-net \\
                              -p 8080:8080 \\
                              --restart=always \\
                              -e SPRING_PROFILES_ACTIVE=prod \\
                              -v /home/now/toy-secret:/config \\
                              ${imageTag}

                            echo "[4] Deployment complete"
                        """
                    }
                }
            }
        }
    }
}
